id: 26070
date: 06/29/2016
title: Symantec AntiVirus - Heap Overflow Modifying MIME Messages
author: Google Security Research
cves: CVE-2016-3644

Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=818
 
Symantec attempts to clean or remove components from archives or other multipart containers that they detect as malicious. The code that they use to remove components from MIME encoded messages in CMIMEParser::UpdateHeader() assumes that filenames cannot be longer than 77 characters.
 
This assumption is obviously incorrect, names can be any length, resulting in a very clean heap overflow.
 
The heap overflow occurs because Symantec does the cleaning in multiple stages, first changing the Content-Type to "text/plain", then changing the filename to "DELETED.TXT". The problem is that during the first stage of this process, they maintain the existing name but use a buffer prepared for the final name.
 
Something like:
 
char *buf = malloc(strlen(NewContentType) + strlen(LengthOfNewEncodedFilename) + 100)
 
// First change the content-type
strcpy(buf, "Content-Type: ");
strcpy(buf, NewContentType;
strcpy(buf, "; name=\"");
strcpy(buf, OldFileName);
 
...
UpdateName(buf, NewFileName);
...
 
This obviously won't work, because it doesn't verify that the old name will fit. I've attached an example MIME message that triggers this code in Symantec Scan Engine.
 
 
Proof of Concept:
https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/sploits/40034.zip

#  0day.today [2023-03-27]  #